{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport const useFetch = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const fetchData = async (url, body, method = \"POST\") => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: body ? JSON.stringify(body) : null\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      setError(err.message || \"An error occurred\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    data,\n    error,\n    loading,\n    fetchData\n  };\n};\n_s(useFetch, \"QWXYazGZi4Gt8Bx0Jk+qWzQvd34=\");","map":{"version":3,"names":["useState","useFetch","_s","data","setData","error","setError","loading","setLoading","fetchData","url","body","method","response","fetch","headers","JSON","stringify","ok","Error","status","statusText","result","json","err","message"],"sources":["C:/Users/ASRock/Documents/GitHub/Node/Epayco/virtual-wallet/client/src/hooks/useFetch.ts"],"sourcesContent":["import { useState } from \"react\";\r\n\r\ninterface UseFetchResult<T> {\r\n  data: T | null;\r\n  error: string | null;\r\n  loading: boolean;\r\n  fetchData: (url: string, body?: any, method?: string) => Promise<void>;\r\n}\r\n\r\nexport const useFetch = <T>(): UseFetchResult<T> => {\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const fetchData = async (url: string, body?: any, method: string = \"POST\") => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: body ? JSON.stringify(body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n    } catch (err: any) {\r\n      setError(err.message || \"An error occurred\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { data, error, loading, fetchData };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAShC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAA4B;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAW,IAAI,CAAC;EAChD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAU,KAAK,CAAC;EAEtD,MAAMS,SAAS,GAAG,MAAAA,CAAOC,GAAW,EAAEC,IAAU,EAAEC,MAAc,GAAG,MAAM,KAAK;IAC5EJ,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;QAChCE,MAAM;QACNG,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDJ,IAAI,EAAEA,IAAI,GAAGK,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,GAAG;MACtC,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,UAAUN,QAAQ,CAACO,MAAM,IAAIP,QAAQ,CAACQ,UAAU,EAAE,CAAC;MACrE;MAEA,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACpCnB,OAAO,CAACkB,MAAM,CAAC;IACjB,CAAC,CAAC,OAAOE,GAAQ,EAAE;MACjBlB,QAAQ,CAACkB,GAAG,CAACC,OAAO,IAAI,mBAAmB,CAAC;IAC9C,CAAC,SAAS;MACRjB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAEL,IAAI;IAAEE,KAAK;IAAEE,OAAO;IAAEE;EAAU,CAAC;AAC5C,CAAC;AAACP,EAAA,CAhCWD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}